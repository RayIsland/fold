structure:
my-gradle-project
2 │── build.gradle (Groovy Build Script)
3 │── settings.gradle
4 │── src
5 │ ├── main
6 │ │ ├── java
7 │ │ └── resources
8 │ ├── test
9 │ │ ├── java
10│ │ └── resources

build.gradle
 plugins {
 id 'application'
 }

 repositories {
 mavenCentral()
 }

 dependencies {
 testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
 }

 application {
 mainClass = 'com.example.Main'
 }

 Main.java in src/main/java/com/example
 package com.example;
 public class Main {
 public static void main(String[] args) {
 System.out.println("Hello from Gradle!");
 }
 }

In IntelliJ IDEA, open the Gradle tool window View → Tool Windows → Gradle).
Click Tasks > application > run 
OR
gradle run

github pages after pushing to github

Testing the Website using Selenium & TestNG
build.gradle
dependencies {
testImplementation 'org.seleniumhq.selenium:selenium-java:4.28.1' // use the latest stable version
 testImplementation 'org.testng:testng:7.4.0' // use the latest stable version
 }
 test {
 useTestNG()
 }

 src/test/java/org/test/WebpageTest.java
 package org.test;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.chrome.ChromeDriver;
 import org.testng.Assert;
 import org.testng.annotations.AfterTest;
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 import static org.testng.Assert.assertTrue;
 public class WebpageTest {
 private static WebDriver driver;
 @BeforeTest
 public void openBrowser() throws InterruptedException {
 driver = new ChromeDriver();
 driver.manage().window().maximize();
 Thread.sleep(2000);
 driver.get("https://rayisland.github.io/xyz/");
 }
 @Test
 public void titleValidationTest(){
 String actualTitle = driver.getTitle();
 String expectedTitle = "Tripillar Solutions";
 Assert.assertEquals(actualTitle, expectedTitle);
 assertTrue(true, "Title should contain 'Tripillar'");
 }
 @AfterTest
 public void closeBrowser() throws InterruptedException {
 Thread.sleep(1000);
 driver.quit();
 }
 }

Run the tests:
gradle test

 JAR packaging
 build.gradle
plugins {
 id 'java'
 id 'application'
 }
 application {
 mainClass = 'com.example.Main'
 }
 jar {
 manifest {
 attributes 'Main-Class': 'com.example.Main' // This tells Java where to start execution
 }
 }

gradle jar
java -jar build/libs/<my-gradle-project>.jar

##
gradle init, gradle build, gradle run, gradle clean, gradle test, gradle jar


gradle run
gradle build 
gradle clean
gradle jar


___________
Kotlin

build.gradle.kts
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    kotlin("jvm") version "1.8.10" // Use latest stable Kotlin version
    application
}

group = "org.example"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
}

dependencies {
    implementation(kotlin("stdlib")) // Kotlin Standard Library
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.8.2")
}

tasks.test {
    useJUnitPlatform()
}

tasks.withType<KotlinCompile> {
    kotlinOptions.jvmTarget = "17" // Match with your JDK version
}

application {
    mainClass.set("MainKt") // Update this if using a package
}

Main.kt in src/main/kotlin/
package org.example
 fun main() {
 println("Hello, Gradle with Kotlin DSL!")
 }

./gradlew build
./gradlew run

packaging into jar:
build.gradle.kts
tasks.register<Jar>("fatJar") {
    archiveClassifier.set("all")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes["Main-Class"] = "MainKt"
    }
    from(configurations.runtimeClasspath.get().map { if (it.isDirectory) it else zipTree(it) })
    with(tasks.jar.get() as CopySpec)
}

./gradlew fatJar
java -jar build/libs/MVNGRDKOTLINDEMO-1.0-SNAPSHOT-all.jar